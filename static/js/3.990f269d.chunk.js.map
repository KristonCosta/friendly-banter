{"version":3,"sources":["App.tsx","reportWebVitals.ts","bootstrap.tsx","../wasm/pkg/wasm_bg.js"],"names":["App","useState","add_two_ints","sum","fib","fibb","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","init_panic_hook","ReactDOM","render","StrictMode","document","getElementById","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","wasm","a","b","n","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","cachegetInt32Memory0","getInt32Memory0","Int32Array","__wbg_new_59cb74e423758ede","obj","addHeapObject","Error","__wbg_stack_558ba5917b466edd","arg0","arg1","ptr0","malloc","realloc","ptr","subarray","len","mem","offset","code","charCodeAt","slice","passStringToWasm0","stack","len0","__wbg_error_4bb6c2a97407129a","console","error","__wbindgen_object_drop_ref"],"mappings":"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","file":"static/js/3.990f269d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport {add_two_ints, fib} from \"wasm\";\nfunction App() {\n   const [sum, setSum] = useState<number>(add_two_ints(10, 20));\n   const [fibb, setFib] = useState<number>(fib(10));\n   return (\n      <div className=\"App\" >\n         <div>Sum Results: {sum}</div>\n         <div>Fib Results: {fibb}</div>\n      </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { init_panic_hook } from 'wasm'\n\ninit_panic_hook();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as wasm from './wasm_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function init_panic_hook() {\n    wasm.init_panic_hook();\n}\n\n/**\n* @param {number} a\n* @param {number} b\n* @returns {number}\n*/\nexport function add_two_ints(a, b) {\n    var ret = wasm.add_two_ints(a, b);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} n\n* @returns {number}\n*/\nexport function fib(n) {\n    var ret = wasm.fib(n);\n    return ret >>> 0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\n"],"sourceRoot":""}